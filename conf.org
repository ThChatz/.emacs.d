
* Theme And Appearance
  #+BEGIN_SRC emacs-lisp

    (custom-set-variables
     '(custom-enabled-themes (quote (assemblage)))
     
     '(ansi-color-faces-vector
     [default default default italic underline success warning error])
     '(ansi-color-names-vector
     ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])

     '(custom-safe-themes
     (quote
      ("1177fe4645eb8db34ee151ce45518e47cc4595c3e72c55dc07df03ab353ad132" default))))
     (let ((spec '((t (:family "Source Code Pro" :height 120)))))
     (mapc (lambda (face)
     (face-spec-set face spec)
     (put face 'face-defface-spec spec))
     '(default menu)))
     
     (scroll-bar-mode 0)
     (menu-bar-mode 0)
     (tool-bar-mode 0)
  #+END_SRC
* Enable Commands And Misc Modifications
  #+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  
  (setq dired-isearch-filenames t)
  (setq delete-by-moving-to-trash t)

  ;; make DEL not treat regions differently
  (setq delete-active-region 'nil)

  #+END_SRC

* Package Management And Init
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (package-initialize)
    

    (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                             ("marmalade" . "https://marmalade-repo.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")))
  #+END_SRC
** Helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm)
   #+END_SRC
** Ivy
   #+BEGIN_SRC emacs-lisp
   (use-package ivy)
   #+END_SRC
** Nlinum
  #+BEGIN_SRC emacs-lisp
    (use-package nlinum
      :ensure t
      :init (setq nlinum-format "%6d"
      nlinm--width 10))
  #+END_SRC
** Electric Pair
  #+BEGIN_SRC emacs-lisp
    (use-package electric-pair-mode
      :init (electric-pair-mode 1))
  #+END_SRC
** Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package YASnippet
      :config (setq yas-snippet-dirs "~/.emacs.d/snippets/")
      :init (yas-global-mode 1))
  #+END_SRC
** Company-mode
   #+BEGIN_SRC emacs-lisp
   (use-package company
  :ensure t
  :defer t
  :init (add-hook 'after-init-hook 'global-company-mode)
  :config
  (use-package company-irony :ensure t :defer t)
  (setq company-idle-delay              nil
	company-minimum-prefix-length   2
	company-show-numbers            t
	company-tooltip-limit           20
	company-dabbrev-downcase        nil)
  :bind ("C-;" . company-complete-common))


   
   #+END_SRC
** Electric Operator
  #+BEGIN_SRC emacs-lisp
    (use-package electric-operator
      :config (electric-operator-add-rules-for-mode
  	     'c-mode
  	     (cons "*" nil)))
  #+END_SRC
** Undo Tree
  #+BEGIN_SRC emacs-lisp
  (use-package undo-tree)
  #+END_SRC
** Aggressive Indent
  #+BEGIN_SRC emacs-lisp
    (use-package aggressive-indent)
  #+END_SRC
** Avy-Jump
   #+BEGIN_SRC emacs-lisp
   (use-package avy
   :bind ("M-C" . avy-goto-char))
   
   #+END_SRC
** Icicles
   #+BEGIN_SRC emacs-lisp
     (use-package icicles
       :bind (("C-z" . icy-mode)))
   #+END_SRC
** Ggtags
   #+BEGIN_SRC emacs-lisp

   (use-package ggtags)
   (add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

	      (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
	      (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
	      (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
	      (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
	      (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
	      (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
	      (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
   
   #+END_SRC
** Simpleclip
   #+BEGIN_SRC emacs-lisp
   (use-package simpleclip
   :config (simpleclip-mode 1))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
   :config (prog1 (projectile-mode)
   (setq projectile-enable-caching t
   projectile-mode-line
   '(:eval (format " Projectile[%s]"
   (projectile-project-name))))))
   #+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
   :config (global-flycheck-mode 1))
   #+END_SRC
* C/C++ Mode Hook
  C-common mode
  #+BEGIN_SRC emacs-lisp
  (defun my-c-common-hook ()
      (nlinum-mode 1)
       (undo-tree-mode 1)
       (c-toggle-hungry-state 1)
       (aggressive-indent-mode 1)
       (whitespace-cleanup-mode 1)
       (local-set-key ( kbd "DEL" ) 'c-hungry-delete)
       (c-set-offset 'innamespace 0)
       (c-toggle-auto-newline 1)
       (company-mode 1)
       (irony-mode 1)
       (semantic-mode 1)
       (semantic-idle-completions-mode 1)


       
       (setq c-basic-offset 4))
       (add-hook 'c-mode-common-hook 'my-c-common-hook)

       (defun my-c-mode-hook ()
       (set (make-local-variable 'company-backends)
       '(company-semantic company-gtags)))
       
       (add-hook 'c-mode-hook 'my-c-mode-hook)

       (defun my-cpp-mode-hook ()
       (set (make-local-variable 'company-backends)
       '(company-semantic company-gtags)))

       (add-hook 'c++-mode-hook 'my-cpp-mode-hook)
  #+END_SRC
* Org Mode Hook
  #+BEGIN_SRC emacs-lisp
    (use-package ox)
    ;; configuration for org-mode latex rendering
    (org-export-define-backend 'xelatex
      :export-options '((subtree body-only visible-only))
      :options-alist '((:date "DATE" nil "\\today" t)
  		     (:date-format nil nil org-latex-date-timestamp-format)
  		     (:latex-class "LATEX_CLASS" nil org-latex-default-class t)
  		     (:latex-class-options "LATEX_CLASS_OPTIONS" nil nil t)
  		     (:latex-header-extra "LATEX_HEADER" nil  nil  newline)
  		     (:latex-hyperref-p nil "texht" org-latex-with-hyperref t)))

    ;;Fix for printing unicode
    (add-to-list 'org-latex-default-packages-alist '("" "fontspec" t))
    
    (setq org-latex-inputenc-alist '(("utf8" . "utf8x"))) 
    (add-to-list 'org-latex-packages-alist '("" "unicode-math"))
    
    ;; make rendered font readable
    (plist-put org-format-latex-options :scale 1.2)


        (setq org-preview-latex-process-alist
       (quote
       ((dvipng :programs
         ("xelatex" "dvipng")
         :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
         (1.0 . 1.0)
         :latex-compiler
         ("xelatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
         :image-converter
         ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
 (dvisvgm :programs
          ("latex" "dvisvgm")
          :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
          (1.7 . 1.5)
          :latex-compiler
          ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
          :image-converter
          ("dvisvgm %f -n -b min -c %S -o %O"))
 (imagemagick :programs
              ("latex" "convert")
              :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust
              (1.0 . 1.0)
              :latex-compiler
              ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
              :image-converter
              ("convert -density %D -trim -antialias %f -quality 100 %O")))))

    (setq org-preview-latex-default-process 'dvisvgm)


    (setq org-latex-pdf-process
  	'("xelatex -interaction nonstopmode -output-directory %o %f" "xelatex -interaction nonstopmode -output-directory %o %f" "xelatex -interaction nonstopmode -output-directory %o %f"))


    (defun org-insert-R ()
      (interactive)
      (insert-char #X211D))

    (defun org-insert-Q ()
      (interactive)
      (insert-char #X211A))

    (defun org-insert-N ()
      (interactive)
      (insert-char #X2115))

    (defun org-insert-Z ()
      (interactive)
      (insert-char #X2124))

    (defun org-insert-l ()
      (interactive)
      (insert-char #X2113))

    (defun my-org-mode-hook()
      (nlinum-mode 1)
      (undo-tree-mode 1)
      (org-bullets-mode 1)
      (local-set-key (kbd "s-r") 'org-insert-R )
      (local-set-key (kbd "s-q") 'org-insert-Q )
      (local-set-key (kbd "s-n") 'org-insert-N )
      (local-set-key (kbd "s-z") 'org-insert-Z )
      (local-set-key (kbd "s-l") 'org-insert-l ))


    (add-hook 'org-mode-hook 'my-org-mode-hook)
  #+END_SRC
* Tetris Mode Hook
  #+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'tetris
  (define-key tetris-mode-map (kbd "C-n") 'tetris-move-down)
  (define-key tetris-mode-map (kbd "C-p") 'tetris-rotate-next)  
  (define-key tetris-mode-map (kbd "C-f") 'tetris-move-right)
  (define-key tetris-mode-map (kbd "C-b") 'tetris-move-left)
  (setq tetris-score-file (expand-file-name "tetris-scores" user-emacs-directory)))


  #+END_SRC
